using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WeatherApplicationTest.Model;
//
//    var currentCondition = CurrentCondition.FromJson(jsonString);

namespace WeatherApplicationTest.Model
{
   

    public partial class CurrentCondition
    {
        [JsonProperty("LocalObservationDateTime", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? LocalObservationDateTime { get; set; }

        [JsonProperty("EpochTime", NullValueHandling = NullValueHandling.Ignore)]
        public long? EpochTime { get; set; }

        [JsonProperty("WeatherText", NullValueHandling = NullValueHandling.Ignore)]
        public string WeatherText { get; set; }

        [JsonProperty("WeatherIcon", NullValueHandling = NullValueHandling.Ignore)]
        public int? WeatherIcon { get; set; }

        [JsonProperty("HasPrecipitation", NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasPrecipitation { get; set; }

        [JsonProperty("PrecipitationType")]
        public object PrecipitationType { get; set; }

        [JsonProperty("IsDayTime", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsDayTime { get; set; }

        [JsonProperty("Temperature", NullValueHandling = NullValueHandling.Ignore)]
        public Temperature Temperature { get; set; }

        [JsonProperty("RealFeelTemperature", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature RealFeelTemperature { get; set; }

        [JsonProperty("RealFeelTemperatureShade", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature RealFeelTemperatureShade { get; set; }

        [JsonProperty("RelativeHumidity", NullValueHandling = NullValueHandling.Ignore)]
        public long? RelativeHumidity { get; set; }

        [JsonProperty("DewPoint", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature DewPoint { get; set; }

        [JsonProperty("Wind", NullValueHandling = NullValueHandling.Ignore)]
        public Wind Wind { get; set; }

        [JsonProperty("WindGust", NullValueHandling = NullValueHandling.Ignore)]
        public WindGust WindGust { get; set; }

        [JsonProperty("UVIndex", NullValueHandling = NullValueHandling.Ignore)]
        public long? UvIndex { get; set; }

        [JsonProperty("UVIndexText", NullValueHandling = NullValueHandling.Ignore)]
        public string UvIndexText { get; set; }

        [JsonProperty("Visibility", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Visibility { get; set; }

        [JsonProperty("ObstructionsToVisibility", NullValueHandling = NullValueHandling.Ignore)]
        public string ObstructionsToVisibility { get; set; }

        [JsonProperty("CloudCover", NullValueHandling = NullValueHandling.Ignore)]
        public long? CloudCover { get; set; }

        [JsonProperty("Ceiling", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Ceiling { get; set; }

        [JsonProperty("Pressure", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Pressure { get; set; }

        [JsonProperty("PressureTendency", NullValueHandling = NullValueHandling.Ignore)]
        public PressureTendency PressureTendency { get; set; }

        [JsonProperty("Past24HourTemperatureDeparture", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Past24HourTemperatureDeparture { get; set; }

        [JsonProperty("ApparentTemperature", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature ApparentTemperature { get; set; }

        [JsonProperty("WindChillTemperature", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature WindChillTemperature { get; set; }

        [JsonProperty("WetBulbTemperature", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature WetBulbTemperature { get; set; }

        [JsonProperty("Precip1hr", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Precip1Hr { get; set; }

        [JsonProperty("PrecipitationSummary", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, ApparentTemperature> PrecipitationSummary { get; set; }

        [JsonProperty("TemperatureSummary", NullValueHandling = NullValueHandling.Ignore)]
        public TemperatureSummary TemperatureSummary { get; set; }

        [JsonProperty("MobileLink", NullValueHandling = NullValueHandling.Ignore)]
        public Uri MobileLink { get; set; }

        [JsonProperty("Link", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Link { get; set; }
    }

    public partial class ApparentTemperature
    {
        [JsonProperty("Metric", NullValueHandling = NullValueHandling.Ignore)]
        public Metric Metric { get; set; }

        [JsonProperty("Imperial", NullValueHandling = NullValueHandling.Ignore)]
        public Imperial Imperial { get; set; }
    }

    public partial class Temperature
    {
        [JsonProperty("Metric", NullValueHandling = NullValueHandling.Ignore)]
        public Metric Metric { get; set; }

        [JsonProperty("Imperial", NullValueHandling = NullValueHandling.Ignore)]
        public Imperial Imperial { get; set; }
    }

    public partial class Imperial
    {
        [JsonProperty("Value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value { get; set; }

        [JsonProperty("Unit", NullValueHandling = NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [JsonProperty("UnitType", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitType { get; set; }
    }

    public partial class Metric
    {
        [JsonProperty("Value", NullValueHandling = NullValueHandling.Ignore)]
        public double? Value {get; set; }

        [JsonProperty("Unit", NullValueHandling = NullValueHandling.Ignore)]
        public string Unit { get; set; }

        [JsonProperty("UnitType", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnitType { get; set; }
    }

    public partial class PressureTendency
    {
        [JsonProperty("LocalizedText", NullValueHandling = NullValueHandling.Ignore)]
        public string LocalizedText { get; set; }

        [JsonProperty("Code", NullValueHandling = NullValueHandling.Ignore)]
        public string Code { get; set; }
    }

    public partial class TemperatureSummary
    {
        [JsonProperty("Past6HourRange", NullValueHandling = NullValueHandling.Ignore)]
        public PastHourRange Past6HourRange { get; set; }

        [JsonProperty("Past12HourRange", NullValueHandling = NullValueHandling.Ignore)]
        public PastHourRange Past12HourRange { get; set; }

        [JsonProperty("Past24HourRange", NullValueHandling = NullValueHandling.Ignore)]
        public PastHourRange Past24HourRange { get; set; }
    }

    public partial class PastHourRange
    {
        [JsonProperty("Minimum", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Minimum { get; set; }

        [JsonProperty("Maximum", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Maximum { get; set; }
    }

    public partial class Wind
    {
        [JsonProperty("Direction", NullValueHandling = NullValueHandling.Ignore)]
        public Direction Direction { get; set; }

        [JsonProperty("Speed", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Speed { get; set; }
    }

    public partial class Direction
    {
        [JsonProperty("Degrees", NullValueHandling = NullValueHandling.Ignore)]
        public long? Degrees { get; set; }

        [JsonProperty("Localized", NullValueHandling = NullValueHandling.Ignore)]
        public string Localized { get; set; }

        [JsonProperty("English", NullValueHandling = NullValueHandling.Ignore)]
        public string English { get; set; }
    }

    public partial class WindGust
    {
        [JsonProperty("Speed", NullValueHandling = NullValueHandling.Ignore)]
        public ApparentTemperature Speed { get; set; }
    }

    public partial class CurrentCondition
    {
        public static List<CurrentCondition> FromJson(string json) => JsonConvert.DeserializeObject<List<CurrentCondition>>(json, WeatherApplicationTest.Model.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<CurrentCondition> self) => JsonConvert.SerializeObject(self,WeatherApplicationTest.Model.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            ObjectCreationHandling = ObjectCreationHandling.Replace,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

